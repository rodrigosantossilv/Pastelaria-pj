CREATE DATABASE  Pastelaria;
USE Pastelaria;

CREATE TABLE clientes (
    id_cliente int primary key auto_increment,
    nome_completo varchar(100),
    nome_preferido varchar(50),
    cpf VARCHAR(14) unique,
    data_nascimento date,
    telefone varchar(15),
    email varchar(100),
    bairro varchar(100),
    cidade varchar(50),
    estado varchar(2)
);

CREATE TABLE categoria (
    id_categoria int primary key auto_increment,
    nome varchar(100)
);

CREATE TABLE forma_pagamentos (
    id_forma_pagamento int primary key auto_increment,
    nome varchar(100)
);

CREATE TABLE recheio (
    id_recheio int primary key auto_increment,
    nome varchar(100)
);

CREATE TABLE pedidos (
    id_pedido int primary key auto_increment,
    data_pedido date default (CURRENT_DATE),
    id_cliente int not null,
    id_forma_pagamento int not null,
    foreign key(id_forma_pagamento) references forma_pagamentos(id_forma_pagamento),
    foreign key(id_cliente) references clientes(id_cliente)
);

CREATE TABLE produto (
    id_produto INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50),
    preco DECIMAL(8,2),
    tamanho VARCHAR(50),
    id_categoria INT NOT NULL,
    id_recheio INT NULL,
    FOREIGN KEY (id_categoria) REFERENCES categoria(id_categoria),
    FOREIGN KEY (id_recheio) REFERENCES recheio(id_recheio)
);
CREATE TABLE recheio_produto (
    id_recheio_produto int primary key auto_increment,
    id_recheio int not null,
    id_produto int not null,
    foreign key(id_recheio) references recheio(id_recheio),
    foreign key(id_produto) references produto(id_produto)
);

CREATE TABLE itens_pedido (
    id_item int primary key auto_increment,
    id_pedido int not null,
    id_produto int not null,
    quantidade int not null,
    foreign key(id_pedido) references pedidos(id_pedido),
    foreign key(id_produto) references produto(id_produto)
);

INSERT INTO recheio(nome)
VALUES 
('carne'),
('frango'),
('queijo'),
('palmito'),
('espinafre'),
('camar√£o'),
('bacalhau'),
('Pastel de Queijo e Cheesecake'),
('Queijo com Goiabada'),
('Queijo e Milho');

INSERT INTO categoria(nome)
VALUES 
('simples'),
('vegano'),
('vegetariano'),
('zero lactose'),
('bebida');

INSERT INTO forma_pagamentos(nome)
VALUES 
('dinheiro'),('pix'),('cart√£o debito'),('cart√£o credito');

DELIMITER //
CREATE PROCEDURE AdicionarCliente(
    IN nome_completo VARCHAR(100),
    IN nome_preferido VARCHAR(50),
    IN cpf VARCHAR(14),
    IN data_nascimento DATE,
    IN telefone VARCHAR(15),
    IN email VARCHAR(100),
    IN bairro VARCHAR(100),
    IN cidade VARCHAR(50),
    IN estado VARCHAR(2)
)
BEGIN
    INSERT INTO clientes (nome_completo, nome_preferido, cpf, data_nascimento, telefone, email, bairro, cidade, estado) 
    VALUES (nome_completo, nome_preferido, cpf, data_nascimento, telefone, email, bairro, cidade, estado);
END  //
DELIMITER ;
CALL AdicionarCliente('Rodigo da Silva', 'Rodrigo', '123.456.789-01', '2005-05-09', '123456789', 'rodrigo@email.com', 'humildes', 'FSA', 'BA');
CALL AdicionarCliente('Carlos henrique', 'Carlos', '345.609.456-01', '2003-08-03', '750304859', 'carlos@email.com', 'Aviario', 'FSA', 'BA');
CALL AdicionarCliente('Yasmin nere', 'Yasmin', '503.987.545-01', '2004-03-14', '75395030', 'carlos@email.com', 'feira 7', 'FSA', 'BA');
-- üòé
CALL AdicionarCliente('Lucia Oliveira', 'Lucia', '789.456.123-45', '2008-09-25', '987654321', 'lucia@email.com', 'Centro', 'S√£o Paulo', 'SP');
CALL AdicionarCliente('Pedro Santos', 'Pedro', '987.654.321-01', '2010-03-12', '654321987', 'pedro@email.com', 'Bairro Alegre', 'Rio de Janeiro', 'RJ');
CALL AdicionarCliente('Camila Silva', 'Camila', '234.567.890-12', '2009-08-18', '876543210', 'camila@email.com', 'Nova Cidade', 'Salvador', 'BA');
CALL AdicionarCliente('Mateus Oliveira', 'Mateus', '345.678.901-23', '2011-05-07', '543210987', 'mateus@email.com', 'Centro', 'Florian√≥polis', 'SC');
CALL AdicionarCliente('Maria da Silva', 'Maria', '789.012.345-67', '1990-02-15', '987654321', 'maria@email.com', 'Centro', 'S√£o Paulo', 'SP');
CALL AdicionarCliente('Jo√£o Oliveira', 'Jo√£o', '456.789.012-34', '1985-07-22', '654321987', 'joao@email.com', 'Morada das alvores', 'Velho', 'RJ');
CALL AdicionarCliente('Ana Souza', 'Ana', '890.123.456-78', '1988-11-30', '987123654', 'ana@email.com', 'Barauna', 'Fim de Mundo', 'SC');

SELECT * FROM clientes;

DELIMITER //
CREATE PROCEDURE AdicionarProduto(   
    IN nome VARCHAR(50),
    IN preco DECIMAL(8,2),
    IN tamanho VARCHAR(50),
    IN id_categoria INT,
    IN id_recheio INT 
)
BEGIN
    -- Verifica se id_recheio √© nulo e atribui o valor padr√£o
    IF id_recheio IS NULL THEN
        SET id_recheio = null; -- Coloque o valor padr√£o desejado aqui
    END IF;

    -- Verifica se id_recheio ainda √© nulo e insere na tabela com o valor padr√£o
    IF id_recheio IS NULL THEN
        INSERT INTO produto (nome, preco, tamanho, id_categoria) 
        VALUES (nome, preco, tamanho, id_categoria);
    ELSE
        INSERT INTO produto (nome, preco, tamanho, id_categoria, id_recheio) 
        VALUES (nome, preco, tamanho, id_categoria, id_recheio);
    END IF;
END //
DELIMITER ;


CALL AdicionarProduto('Suco de laranja', 2.00, '1L', 5, null);
CALL AdicionarProduto('Suco de laranja', 5.00, '2L', 5, null);
CALL AdicionarProduto('Refrigerante de cola', 3.50, '1L', 5, null);
CALL AdicionarProduto('Refrigerante de guaran√°', 4.00, '1L', 5, null);
CALL AdicionarProduto('Suco de morango', 7.00, '2L', 5, null);
CALL AdicionarProduto('Suco de lim√£o', 3.50, '1L', 5, null);
CALL AdicionarProduto('Tubaina', 1.50, '350 ML', 5, null);
CALL AdicionarProduto('Pastel de carne', 5.00, 'M', 1, 1);
CALL AdicionarProduto('Pastel de frango', 6.00, 'G', 1, 2);
CALL AdicionarProduto('Pastel de queijo', 6.00, 'G', 1, 3);
CALL AdicionarProduto('Pastel de palmito', 3.00, 'P', 2, 4);
CALL AdicionarProduto('Pastel de espinafre', 5.50, 'G', 2, 5);
CALL AdicionarProduto('Pastel de Queijo com Goiabada', 6.50, 'M', 4, 9);
CALL AdicionarProduto('Pastel de camar√£o', 6.50, 'M', 4, 6);
CALL AdicionarProduto('Pastel de bacalhau', 6.50, 'M', 4, 7);
CALL AdicionarProduto('Pastel de bacon', 6.50, 'M', 4,11);
INSERT INTO recheio (nome) VALUES ('Bacon');
SET @id_novo_recheio = LAST_INSERT_ID();

SELECT * FROM categoria;
SELECT * FROM recheio; 
SELECT * FROM produto;

DELIMITER //
CREATE PROCEDURE AdicionaRecheio(
    IN id_recheio INT,
    IN id_produto INT
)
BEGIN
    INSERT INTO recheio_produto (id_produto, id_recheio) 
    VALUES (id_produto, id_recheio);
END //

DELIMITER ;

CALL AdicionaRecheio(1, 1);
CALL AdicionaRecheio(2, 2);
CALL AdicionaRecheio(3, 3);
CALL AdicionaRecheio(4, 4);
CALL AdicionaRecheio(5, 5);
CALL AdicionaRecheio(6, 6);
CALL AdicionaRecheio(7, 7);
CALL AdicionaRecheio(8, 8);
CALL AdicionaRecheio(9, 9);
CALL AdicionaRecheio(10, 10);
CALL AdicionaRecheio(11, 11);

SELECT * FROM recheio_produto;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (1, 1);
SET @id_pedido_rodrigo = LAST_INSERT_ID();

INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_rodrigo, 10, 2);  -- Suco de laranja (2 unidades)
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_rodrigo, 12, 1);  -- Refrigerante de guaran√° (1 unidade)
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (1, 1);
SET @id_pedido_1 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_1, 10, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_1, 12, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (3, 2);
SET @id_pedido_1 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_1, 15, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_1, 10, 5);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (4, 2);
SET @id_pedido_2 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_2, 11, 3);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_2, 13, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (6, 1);
SET @id_pedido_3 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_3, 7, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_3, 6, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (9, 1);
SET @id_pedido_4 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_4, 10, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_4, 13, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (10, 1);
SET @id_pedido_5 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_5, 12, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_5, 14, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (8, 1);
SET @id_pedido_6 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_6, 11, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_6, 6, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (7, 1);
SET @id_pedido_7 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_7, 14, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_7, 3, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (6, 1);
SET @id_pedido_8 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_8, 10, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_8, 12, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (9, 1);
SET @id_pedido_9 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_9, 13, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_9, 15, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (7, 1);
SET @id_pedido_10 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_10, 11, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_10, 10, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (6, 1);
SET @id_pedido_11 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_11, 12, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_11, 7, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_11, 6, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (9, 1);
SET @id_pedido_12 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_12, 10, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_12, 13, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (10, 1);
SET @id_pedido_13 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_13, 12, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_13, 14, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (8, 1);
SET @id_pedido_14 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_14, 11, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_14, 6, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (7, 1);
SET @id_pedido_15 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_15, 14, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_15, 3, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (6, 1);
SET @id_pedido_16 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_16, 10, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_16, 12, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (9, 1);
SET @id_pedido_17 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_17, 13, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_17, 15, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (7, 1);
SET @id_pedido_18 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_18, 11, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_18, 10, 2);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (6, 1);
SET @id_pedido_19 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_19, 12, 1);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_19, 14, 1);
COMMIT;

START TRANSACTION;
INSERT INTO pedidos (id_cliente, id_forma_pagamento) VALUES (9, 1);
SET @id_pedido_20 = LAST_INSERT_ID();
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_20, 11, 2);
INSERT INTO itens_pedido (id_pedido, id_produto, quantidade) VALUES (@id_pedido_20, 6, 1);
COMMIT;

SELECT * FROM pedidos;
SELECT * FROM itens_pedido;

SELECT P.nome
FROM produto AS P
JOIN categoria AS C ON P.id_categoria = C.id_categoria
JOIN itens_pedido AS IP ON P.id_produto = IP.id_produto
JOIN pedidos AS PE ON IP.id_pedido = PE.id_pedido
JOIN clientes AS CL ON PE.id_cliente = CL.id_cliente
WHERE C.id_categoria = 2  -- Categoria de past√©is veganos
AND TIMESTAMPDIFF(YEAR, CL.data_nascimento, CURRENT_DATE) > 18;
 
 SELECT 
    MONTH(data_pedido) AS mes,
    YEAR(data_pedido) AS ano,
    CL.nome_completo AS cliente,
    COUNT(PE.id_pedido) AS numero_pedidos
FROM pedidos AS PE
JOIN clientes AS CL ON PE.id_cliente = CL.id_cliente
WHERE YEAR(data_pedido) = 2023  -- Substitua 2023 pelo ano desejado
GROUP BY YEAR(data_pedido), MONTH(data_pedido), CL.id_cliente
ORDER BY numero_pedidos DESC;


-- AJUDA AQUI
SELECT P.nome AS nome_pastel
FROM produto AS P
JOIN recheio_produto AS RP1 ON P.id_produto = RP1.id_produto
JOIN recheio AS R1 ON RP1.id_recheio = R1.id_recheio AND R1.nome = 'bacon'
JOIN recheio_produto AS RP2 ON P.id_produto = RP2.id_produto
JOIN recheio AS R2 ON RP2.id_recheio = R2.id_recheio AND R2.nome = 'queijo'
WHERE P.id_categoria = 1; -- Substitua pelo ID da categoria desejada

SELECT SUM(preco) AS valor_total_venda
FROM produto;


SELECT p.*
FROM pedidos p
WHERE EXISTS (
    SELECT 1
    FROM itens_pedido ip
    JOIN produto pr ON ip.id_produto = pr.id_produto
    WHERE pr.id_categoria IN (1, 2)  -- IDs das categorias de past√©is
      AND ip.id_pedido = p.id_pedido
)
AND EXISTS (
    SELECT 1
    FROM itens_pedido ip2
    JOIN produto pr2 ON ip2.id_produto = pr2.id_produto
    WHERE pr2.id_categoria = 5  -- ID da categoria de bebidas
      AND ip2.id_pedido = p.id_pedido
);

-- Este gatilho verifica se o cliente tem mais de 18 anos antes de inserir um novo cliente
DELIMITER //
CREATE TRIGGER VerificarIdade
BEFORE INSERT ON clientes
FOR EACH ROW
BEGIN
    IF DATEDIFF(CURRENT_DATE, NEW.data_nascimento) < 6570 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Clientes devem ter pelo menos 18 anos.';
    END IF;
END;
//
DELIMITER ;

-- Este gatilho atualiza a quantidade em estoque ap√≥s a inser√ß√£o de um novo pedido
DELIMITER //
CREATE TRIGGER AtualizarEstoque
AFTER INSERT ON itens_pedido
FOR EACH ROW
BEGIN
    UPDATE produto
    SET quantidade_em_estoque = quantidade_em_estoque - NEW.quantidade
    WHERE id_produto = NEW.id_produto;
END;
//
DELIMITER ;

-- ste gatilho impede a exclus√£o de clientes com pagamentos pendentes.
DELIMITER //
CREATE TRIGGER VerificarPagamentosPendentes
BEFORE DELETE ON clientes
FOR EACH ROW
BEGIN
    DECLARE total_pagamentos INT;
    SELECT COUNT(*) INTO total_pagamentos
    FROM pedidos
    WHERE id_cliente = OLD.id_cliente;
    IF total_pagamentos > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'N√£o √© poss√≠vel excluir clientes com pagamentos pendentes.';
    END IF;
END;
//
DELIMITER ;

-- Este gatilho atualiza o total de vendas de uma categoria ap√≥s a inser√ß√£o de um novo pedido.
DELIMITER //
CREATE TRIGGER AtualizarTotalVendas
AFTER INSERT ON itens_pedido
FOR EACH ROW
BEGIN
    UPDATE categoria
    SET total_vendas = total_vendas + NEW.quantidade
    WHERE id_categoria = (
        SELECT id_categoria
        FROM produto
        WHERE id_produto = NEW.id_produto
    );
END;
//
DELIMITER ;

-- Este gatilho impede a atualiza√ß√£o de produtos com pre√ßos negativos
DELIMITER //
CREATE TRIGGER EvitarPrecosNegativos
BEFORE UPDATE ON produto
FOR EACH ROW
BEGIN
    IF NEW.preco < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'N√£o √© permitido definir pre√ßos negativos.';
    END IF;
END;
//
DELIMITER ;

-- para listar todos os clientes com seus pedidos:
CREATE VIEW vw_clientes_pedidos AS
SELECT c.id_cliente AS cliente_id, c.nome_completo, c.nome_preferido, c.cpf, c.data_nascimento, c.telefone, c.email, c.bairro, c.cidade, c.estado,
       p.id_pedido, p.data_pedido, p.id_cliente AS pedido_cliente_id, p.id_forma_pagamento
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente;
SELECT cliente_id, nome_completo, nome_preferido, cpf, data_nascimento, telefone, email, bairro, cidade, estado,
       id_pedido, data_pedido, pedido_cliente_id, id_forma_pagamento
FROM vw_clientes_pedidos;

-- View para mostrar os produtos mais vendidos:
CREATE VIEW vw_produtos_mais_vendidos AS
SELECT pr.nome, COUNT(ip.id_produto) AS total_vendido
FROM produto pr
JOIN itens_pedido ip ON pr.id_produto = ip.id_produto
GROUP BY pr.nome
ORDER BY total_vendido DESC;
SELECT nome, total_vendido
FROM vw_produtos_mais_vendidos;

-- View para listar os pedidos de clientes com mais de 18 anos:
CREATE VIEW vw_pedidos_maiores_18 AS
SELECT p.*
FROM pedidos p
JOIN clientes c ON p.id_cliente = c.id_cliente
WHERE YEAR(CURRENT_DATE()) - YEAR(c.data_nascimento) >= 18;
SELECT * FROM vw_pedidos_maiores_18;

-- Recheios Populares:
CREATE VIEW vw_recheios_populares AS
SELECT r.nome, COUNT(rp.id_produto) AS total_utilizado
FROM recheio r
JOIN recheio_produto rp ON r.id_recheio = rp.id_recheio
GROUP BY r.nome
ORDER BY total_utilizado DESC;
SELECT * FROM vw_recheios_populares;

-- produtos sem vendas
CREATE VIEW vw_produtos_sem_venda AS
SELECT pr.nome
FROM produto pr
LEFT JOIN itens_pedido ip ON pr.id_produto = ip.id_produto
WHERE ip.id_produto IS NULL;
select*from vw_produtos_sem_venda;

-- Clientes que Mais Pedem Bebidas:
CREATE VIEW vw_clientes_mais_pedem_bebidas AS
SELECT c.nome_completo, COUNT(ip.id_produto) AS total_bebidas
FROM clientes c
JOIN pedidos p ON c.id_cliente = p.id_cliente
JOIN itens_pedido ip ON p.id_pedido = ip.id_pedido
JOIN produto pr ON ip.id_produto = pr.id_produto
WHERE pr.id_categoria = 5  -- Assumindo que a categoria 5 representa bebidas
GROUP BY c.nome_completo
ORDER BY total_bebidas DESC;
SELECT * FROM vw_clientes_mais_pedem_bebidas;

-- Pedidos Realizados no √öltimo M√™s:
CREATE VIEW vw_pedidos_ultimo_mes AS
SELECT *
FROM pedidos
WHERE MONTH(data_pedido) = MONTH(CURRENT_DATE()) AND YEAR(data_pedido) = YEAR(CURRENT_DATE());
SELECT * FROM vw_pedidos_ultimo_mes;

